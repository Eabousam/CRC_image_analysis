---
title: "CRC Image Feature Analysis"
format:
  html:
    theme: yeti
    highlight-style: tango
    toc: true
    toc-depth: 3
    toc-floating: true
---



## Image Analysis: TCGAData

#### Setting up environment



```{r}
#| output: False
renv::init()
renv::snapshot()
renv::status()

```



#### Setting up libraries



```{r}
#| output: False
library(BiocManager)
library(MOFA2)
library(remotes)
library(SingleCellExperiment)
library(SpatialExperiment)
library(SpatialFeatureExperiment)
library(MultiAssayExperiment)
library(curatedTCGAData)
library(dplyr)
library(spatstat)
library(moments)
library(pracma)
library(HistoImageR)
library(devtools)
library(ggplot2)
devtools::document()  # Generates NAMESPACE and man/ files
devtools::load_all()



```



#### prov-gigaPath COAD



```{r}
getwd()
dir <- "../TCGA_COAD_READ_provgigapath"
fnames <- list.files(dir, pattern = "\\.csv$", full.names = TRUE)
length(fnames)  # how many slides

```





#### build embedding matrix



```{r}

# Creating matrix for all the images
tensor_matrix <- matrix(nrow = length(fnames), ncol = 768)
slide_ids <- sapply(strsplit(basename(fnames), "\\.csv"), `[`, 1)
rownames(tensor_matrix) <- slide_ids

for (i in seq_along(fnames)) {
  tensor_matrix[i,] <- getEmbeddingLayer(fnames[i])
}

tensor_matrix_full <- na.omit(tensor_matrix)
tensor_matrix_full
```











#### Load in TCGA CRC assay experiment data



```{r}
#| output: False

# List available Assays
curatedTCGAData("COAD", "*",version = "2.1.1", dry.run = TRUE) 
curatedTCGAData("READ", "*",version = "2.1.1", dry.run = TRUE) 


# Load COAD data with multiple assays
coad_mae <- curatedTCGAData(
    diseaseCode = "COAD",
    assays = c("COAD_RNASeq2GeneNorm-20160128", "mRNAArray", "miRNASeqGene"),
    version = "2.1.1",
    dry.run = FALSE
)

# Load READ data (rectal)
read_mae <- curatedTCGAData(
    diseaseCode = "READ",
    assays = c("READ_RNASeq2GeneNorm-20160128", "mRNAArray", "miRNASeqGene"),
    version = "2.1.1",
    dry.run = FALSE
)

```






#### Read Clinical Metadata data and subset



```{r}
# Extract sample-level metadata for READ
read_clinical <- colData(read_mae)

# Check completeness of metadata attributes
completeness <- colSums(!is.na(read_clinical)) / nrow(read_clinical) * 100
summary(completeness)

# Subset to attributes with >95% completeness and remove technical fields
read_clinical_sub <- read_clinical[, which(completeness > 95)] %>%
  as.data.frame() %>%
  select(-matches("aliquot")) %>%
  select(-matches("portion"))


```





#### Matching embedding with clinical metadata



```{r}
patient_ids_from_slides <- sapply(strsplit(rownames(tensor_matrix_full), "-"), 
                                  function(x) paste(x[1:3], collapse = "-"))
rownames(tensor_matrix_full) <- patient_ids_from_slides


for (mae_name in names(crc_mae)) {
  # Extract the MultiAssayExperiment for this assay
  mae <- crc_mae[[mae_name]]
  
  # Extract patient IDs from the columns of this assay
  participants_formated <- sapply(colnames(mae), function(x) {
    paste(strsplit(x, "-")[[1]][1:3], collapse = "-")
  })
  
  # Count how many of these patients have H&E embeddings
  num_shared <- length(intersect(participants_formated, rownames(tensor_matrix_full)))
  
  # Print the result
  msg <- paste0("H&E images with ", mae_name, " = ", num_shared)
  print(msg)
}



```

```{r}
# Combine COAD + READ clinical metadata for patients that have embeddings
common_cols <- intersect(colnames(coad_clinical_sub), colnames(read_clinical_sub))

clinical_sub <- rbind(
  coad_clinical_sub[rownames(coad_clinical_sub) %in% rownames(tensor_matrix_full), common_cols],
  read_clinical_sub[rownames(read_clinical_sub) %in% rownames(tensor_matrix_full), common_cols]
)

# Factorize categorical variables with 2â€“10 unique values
n <- 2
m <- 10
numLv <- apply(clinical_sub, 2, function(x) length(unique(x)))
slideAttrNames <- names(numLv[numLv >= n & numLv <= m])

for (slideAttrName in slideAttrNames) {
  clinical_sub[[slideAttrName]] <- as.factor(clinical_sub[[slideAttrName]])
}

# Final metadata dataframe
metadata_df <- clinical_sub[slideAttrNames]

# Subset embedding matrix to matching patients
embedding_matrix <- tensor_matrix_full[rownames(tensor_matrix_full) %in% rownames(metadata_df), ]
embedding_matrix <- embedding_matrix[!duplicated(rownames(embedding_matrix)), ]

dim(metadata_df)
dim(embedding_matrix)

# Run embedding separation analysis
res <- HistoImageR:::analyze_embedding_separation(embedding_matrix, metadata_df)


res$plots
```







#### Matching embedding and assay data




```{r}
#### 1. Prepare embedding matrix
# Remove duplicate patients
tensor_matrix_unique <- tensor_matrix_full[!duplicated(rownames(tensor_matrix_full)), ]
rownames(tensor_matrix_unique) <- make.unique(rownames(tensor_matrix_unique))

# Extract patient IDs from embedding rows (first 3 components of TCGA ID)
embedding_patients <- sapply(strsplit(rownames(tensor_matrix_unique), "-"), 
                             function(x) paste(x[1:3], collapse = "-"))
rownames(tensor_matrix_unique) <- embedding_patients

#### 2. Prepare RNA assay
rna_se_full <- coad_mae[["COAD_miRNASeqGene-20160128"]]  # full assay
rna_samples <- colnames(rna_se_full)
rna_patients <- sapply(strsplit(rna_samples, "-"), function(x) paste(x[1:3], collapse="-"))

# Remove duplicate RNA samples (keep first occurrence)
dup_mask <- !duplicated(rna_patients)
rna_samples_unique <- rna_samples[dup_mask]
rna_patients_unique <- rna_patients[dup_mask]

# Subset RNA to unique samples
rna_matched <- rna_se_full[, rna_samples_unique]
colnames(rna_matched) <- rna_patients_unique

#### 3. Find common patients
common_patients <- intersect(embedding_patients, rna_patients_unique)

# Subset embedding and RNA to common patients
embedding_matched <- tensor_matrix_unique[common_patients, , drop = FALSE]
rna_matched <- rna_matched[, common_patients, drop = FALSE]

#### 4. Remove miRNAs with -Inf or Inf values
rna_matrix <- assay(rna_matched)
rna_keep <- apply(rna_matrix, 1, function(x) all(is.finite(x)))  # keep rows with all finite values
rna_matched_clean <- rna_matched[rna_keep, ]

# Align embedding to cleaned RNA
embedding_matched_clean <- embedding_matched[colnames(rna_matched_clean), , drop = FALSE]

#### 5. Build SummarizedExperiments
# RNA
rna_se <- SummarizedExperiment(
  assays = list(counts = assay(rna_matched_clean)),
  colData = DataFrame(patientID = colnames(rna_matched_clean))
)

# Convert embedding into an assay R object using summarizedExperiment()
embedding_se <- SummarizedExperiment(
  assays = list(embedding = t(embedding_matched_clean)),  # features x samples
  colData = metadata_df[colnames(rna_matched_clean), , drop = FALSE]
)
rownames(embedding_se) <- paste0("embed_", seq_len(nrow(embedding_se)))

#### 6. Build MultiAssayExperiment
crc_mae <- MultiAssayExperiment(
  experiments = list(
    RNASeq = rna_se,
    embedding = embedding_se
  ),
  colData = colData(embedding_se)  # shared metadata
)


```






#### Multiple assays COAD + READ



```{r}
#----------------------------
# 1. Load RNASeq assays
#----------------------------
coad_mae <- curatedTCGAData(
    diseaseCode = "COAD",
    assays = c("RNASeq2GeneNorm"),
    version = "2.1.1",
    dry.run = FALSE
)

read_mae <- curatedTCGAData(
    diseaseCode = "READ",
    assays = "RNASeq2GeneNorm",
    version = "2.1.1",
    dry.run = FALSE
)

#
rna_coad <- coad_mae[["COAD_RNASeq2GeneNorm-20160128"]]
rna_read <- read_mae[["READ_RNASeq2GeneNorm-20160128"]]
BiocManager::install("TCGAutils")
library(TCGAutils)

# Make sure rownames (genes) are consistent across assays
common_genes <- intersect(rownames(rna_coad_bulk), rownames(rna_read_bulk))

rna_coad_bulk <- rna_coad_bulk[common_genes, ]
rna_read_bulk <- rna_read_bulk[common_genes, ]

# Merge
rna_combined <- cbind(rna_coad_bulk, rna_read_bulk)

# Extract patient IDs (first 3 TCGA fields)
rna_patients <- sapply(strsplit(colnames(rna_combined), "-"),
                       function(x) paste(x[1:3], collapse = "-"))

colnames(rna_combined) <- rna_patients
rna_patients <- make.unique(rna_patients)  # avoid dup colnames

### 4. Prepare embedding matrix
tensor_matrix_unique <- tensor_matrix_full[!duplicated(rownames(tensor_matrix_full)), ]
rownames(tensor_matrix_unique) <- make.unique(rownames(tensor_matrix_unique))

embedding_patients <- sapply(strsplit(rownames(tensor_matrix_unique), "-"),
                             function(x) paste(x[1:3], collapse = "-"))
rownames(tensor_matrix_unique) <- embedding_patients

### 5. Find common patients
common_patients <- intersect(embedding_patients, colnames(rna_combined))
length(common_patients)  # how many overlap?

### 6. Subset both data types
embedding_matched <- tensor_matrix_unique[common_patients, , drop = FALSE]
rna_matched <- rna_combined[, common_patients, drop = FALSE]

# Remove Inf / -Inf
rna_matrix <- assay(rna_matched)
rna_keep <- apply(rna_matrix, 1, function(x) all(is.finite(x)))
rna_matched_clean <- rna_matched[rna_keep, ]

embedding_matched_clean <- embedding_matched[colnames(rna_matched_clean), , drop = FALSE]

### 7. Build SummarizedExperiments
rna_se <- SummarizedExperiment(
  assays = list(counts = assay(rna_matched_clean)),
  colData = DataFrame(patientID = colnames(rna_matched_clean))
)

embedding_se <- SummarizedExperiment(
  assays = list(embedding = t(embedding_matched_clean)),
  colData = metadata_df[colnames(rna_matched_clean), , drop = FALSE]
)
rownames(embedding_se) <- paste0("embed_", seq_len(nrow(embedding_se)))

### 8. Build MultiAssayExperiment
crc_mae <- MultiAssayExperiment(
  experiments = list(
    RNASeq = rna_se, # expression of gene X in patient Y
    Embedding = embedding_se
  ),
  colData = colData(embedding_se)
)


# Extract assay matrix
rna_matrix <- assay(crc_mae[["RNASeq"]])

# Dimensions
dim(rna_matrix)
rna_matrix[1:5, 1:5]


# Extract embedding matrix
embedding_matrix <- assay(crc_mae[["Embedding"]])

# Dimensions
dim(embedding_matrix)
# [features x samples]

# First few rows and columns
embedding_matrix[1:5, 1:5]


```






#### MOFA2 analysis





```{r}
# Create MOFA object
mofa_object <- create_mofa(crc_mae)
views_names(mofa_object)
samples_names(mofa_object) # Should list the 214 patients
# Define model options
model_opts <- get_default_model_options(mofa_object)
model_opts$num_factors <- 15  # Adjust based on your data

# Define training options
train_opts <- get_default_training_options(mofa_object)
train_opts$convergence_mode <- "slow"
train_opts$seed <- 42

# Prepare and run MOFA
mofa_object <- prepare_mofa(
  object = mofa_object,
  model_options = model_opts,
  training_options = train_opts
)

mofa_object.trained <- run_mofa(
  mofa_object,
  outfile = "mofa_model3.hdf5",
  use_basilisk = TRUE
)



```

```{r}
# 1. Load trained MOFA model
mofa_object.trained <- load_model("mofa_model3.hdf5")

# 2. Inspect the model
mofa_object.trained
# This will show the number of factors, views, and samples

# 3. Plot variance explained by each factor for each view
plot_variance_explained(mofa_object.trained, plot_total = TRUE)
library("GGally")
# 4. Factor heatmap (samples x factors)
plot_factors(mofa_object.trained, factors = 1:5, color_by = "tumor_tissue_site")

# 5. Loadings heatmap (features x factors) for the first view (RNASeq)
plot_weights(mofa_object.trained, view = "RNASeq", factors = 1:5, scale = TRUE)

# 6. Factor correlations
plot_factor_cor(mofa_object.trained)

# 7. Optional: PCA-style visualization of factors
factors_matrix <- get_factors(mofa_object.trained, factors = "all", as.data.frame = TRUE)
ggplot(factors_matrix, aes(x = Factor1, y = Factor2, color = as.factor(group))) +
  geom_point(size = 2) +
  theme_minimal() +
  labs(color = "Tumor Site", title = "MOFA Factors 1 vs 2")
```

